from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage 
from aiogram.dispatcher.filters import Command
from config import API_TOKEN, ADMIN_ID
from users import add_user, load_users, toggle_user_access, get_users_keyboard, save_users
from access import MainKeyboard, AccessMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from board import create_task_start, register_task_handlers, task_title_entered, task_start_time_entered, task_duration_time_entered, task_description_entered, TaskCreation
from kcalendar import register_task_checker
from backlog import show_backlog_tasks, register_backlog_handlers
from active_tasks import register_active_tasks_handlers, show_active_tasks
from completed import register_completed_handlers, show_completed_tasks

bot = Bot(token=API_TOKEN)
storage = MemoryStorage() 
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(Command("start"))

async def send_welcome(message: types.Message):
    add_user(message.from_user)
    try:
        users = load_users()
    except Exception as e:
        await message.reply("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_data = users.get(str(message.from_user.id))

    if user_data and user_data['access']:
        if message.from_user.id == ADMIN_ID:
            keyboard = MainKeyboard.admin_menu()
        else:
            keyboard = MainKeyboard.user_menu()
        await message.reply(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        check_status_button = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        keyboard.add(check_status_button)
        await message.reply("–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω–æ–º—É –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)
        if not user_data.get('request_sent'):
            try:
                user_name = message.from_user.username or message.from_user.full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                admin_keyboard = InlineKeyboardMarkup()
                approve_button = InlineKeyboardButton("–†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{message.from_user.id}")
                deny_button = InlineKeyboardButton("–ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"deny_{message.from_user.id}")
                admin_keyboard.add(approve_button, deny_button)
                
                await bot.send_message(ADMIN_ID, f"{user_name} –ø—Ä–æ—Å–∏—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.", reply_markup=admin_keyboard)
                
                user_data['request_sent'] = True
                save_users(users) 
            except Exception as e:
                await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")

@dp.message_handler(lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def handle_check_status(message: types.Message):
    users = load_users()
    user_data = users.get(str(message.from_user.id))
    
    if user_data:
        if user_data['access']:
            if message.from_user.id == ADMIN_ID:
                keyboard = MainKeyboard.admin_menu()
            else:
                keyboard = MainKeyboard.user_menu()
                
            await message.reply(
                f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: *—Ä–∞–∑—Ä–µ—à–µ–Ω*.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                parse_mode=types.ParseMode.MARKDOWN,
                reply_markup=keyboard
            )
        else:
            await message.reply(
                f"–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: *–∑–∞–ø—Ä–µ—â–µ–Ω*. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode=types.ParseMode.MARKDOWN
            )
    else:
        await message.reply("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

@dp.message_handler(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
async def handle_create_task(message: types.Message):
    await create_task_start(message)

@dp.message_handler(lambda message: message.text == "üìã –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    await send_help(message)

@dp.message_handler(lambda message: message.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏")
async def handle_view_tasks(message: types.Message):
    await show_active_tasks(message)

@dp.message_handler(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def handle_list_users(message: types.Message):
    await list_users(message)

@dp.message_handler(lambda message: message.text == "üìÇ –ë–µ–∫–ª–æ–≥")
async def handle_backlog(message: types.Message):
    await show_backlog_tasks(message)

@dp.message_handler(lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ")
async def handle_completed_tasks(message: types.Message):
    await show_completed_tasks(message)

@dp.message_handler(Command("help"))
async def send_help(message: types.Message):
    help_text = (
        "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è:*\n\n"
        "\\- *–ü–æ–º–æ—â—å\\:* –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\.\n"
        "\\- *–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É\\:* –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\\.\n"
        "\\- *–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\\:* –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á\\.\n"
        "\\- *–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á\\:* –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–¥–∞—á\\.\n"
        "\\- *–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ\\:* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏\\.\n"
        "\\- *–ë–µ–∫–ª–æ–≥\\:* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –±–µ–∑ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏\\.\n"
    )
    if message.from_user.id == ADMIN_ID:
        help_text += (
            "\\- *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\:* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\.\n"
        )
    await message.reply(help_text, parse_mode=types.ParseMode.MARKDOWN_V2)

@dp.message_handler(Command("list_users"))
async def list_users(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        keyboard = get_users_keyboard()
        await message.reply("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("toggle_"))
async def process_access_toggle(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split("_")[1]
    users = load_users()
    user_data = users.get(user_id, None)
    if user_data:
        new_access = not user_data['access']
        toggle_user_access(user_id, new_access)
        updated_keyboard = get_users_keyboard()
        await callback_query.message.edit_reply_markup(reply_markup=updated_keyboard)
        await callback_query.answer(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']} —Ç–µ–ø–µ—Ä—å {'—Ä–∞–∑—Ä–µ—à–µ–Ω' if new_access else '–∑–∞–ø—Ä–µ—â–µ–Ω'}.")
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("approve_"))
async def process_approve_access(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split("_")[1]
    users = load_users()
    user_data = users.get(user_id, None)
    if user_data:
        user_data['access'] = True
        save_users(users)
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.answer(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']} —Ä–∞–∑—Ä–µ—à–µ–Ω.")
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("deny_"))
async def process_deny_access(callback_query: types.CallbackQuery):
    user_id = callback_query.data.split("_")[1]
    users = load_users()
    user_data = users.get(user_id, None)
    if user_data:
        user_data['access'] = False
        save_users(users)
        await callback_query.message.edit_reply_markup(reply_markup=None)
        await callback_query.answer(f"–î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']} –∑–∞–ø—Ä–µ—â–µ–Ω.")
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

dp.register_message_handler(task_title_entered, state=TaskCreation.waiting_for_title)
dp.register_message_handler(task_start_time_entered, state=TaskCreation.waiting_for_start_time)
dp.register_message_handler(task_duration_time_entered, state=TaskCreation.waiting_for_time_duration)
dp.register_message_handler(task_description_entered, state=TaskCreation.waiting_for_description)
dp.middleware.setup(AccessMiddleware())

if __name__ == "__main__":
    register_task_handlers(dp)
    register_task_checker(dp)
    register_backlog_handlers(dp)
    register_active_tasks_handlers(dp)
    register_completed_handlers(dp)
    executor.start_polling(dp, skip_updates=True)